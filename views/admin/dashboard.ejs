<%- include("../../views/partials/admin/header") %>

    <!-- <style>
        /* Ensure the card has a clean, professional look */
        .card {
            background-color: #ffffff;
            border: 1px solid #e0e0e0;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            width: 100%;
            max-width: 550px;
            /* Slightly smaller for a tighter, professional look */
            margin: 0 auto;
            /* Center the card */
            padding: 0;
            /* Remove extra padding, let card-body handle it */
        }

        /* Style the card body for consistent padding and alignment */
        .card-body {
            padding: 20px !important;
            /* Consistent padding for a clean look */
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        /* Style the card title for a professional look */
        .card-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 15px;
        }

        /* Control the canvas size to prevent stretching */
        canvas {
            width: 100% !important;
            max-width: 500px !important;
            /* Fixed width to match professional proportions */
            height: 300px !important;
            /* Consistent height as per the original code */
            display: block;
            /* Prevent inline-block spacing issues */
        }

        /* Ensure the container row has proper spacing */
        .row.mb-4 {
            margin-bottom: 2rem !important;
            /* Consistent spacing between rows */
        }

        /* For the Best Selling Products chart (full-width row) */
        #productsChart {
            max-width: 100% !important;
            /* Allow it to take full width of the container */
            height: 300px !important;
        }

        /* Ensure the container has proper padding */
        .container {
            padding-left: 300px;
            padding-top: 150px;
            max-width: 95%;
        }

        /* Style the filter buttons for a professional look */
        .filter-buttons .btn {
            font-size: 0.9rem;
            padding: 6px 12px;
            border-radius: 5px;
            transition: all 0.3s ease;
        }

        .filter-buttons .btn-success {
            background-color: #28a745;
            border-color: #28a745;
            color: #fff;
        }

        .filter-buttons .btn-outline-dark {
            border-color: #666;
            color: #666;
        }

        .filter-buttons .btn:hover {
            opacity: 0.9;
        }
    </style> -->


    <div class="container mt-4" style="max-width: 95%; padding-left:300px; padding-top: 150px;">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2 class="fw-bold">Dashboard</h2>
            <div class="filter-buttons">
                <button class="btn btn-success filter-btn" data-filter="weekly">Weekly</button>
                <button class="btn btn-outline-dark filter-btn" data-filter="monthly">Monthly</button>
                <button class="btn btn-outline-dark filter-btn" data-filter="yearly">Yearly</button>
            </div>
        </div>

        <!-- Charts Row 1 -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card shadow" style="border-radius: 15px;">
                    <div class="card-body">
                        <h5 class="card-title">Revenue</h5>
                        <canvas id="revenueChart" height="300"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card shadow" style="border-radius: 15px;">
                    <div class="card-body">
                        <h5 class="card-title">Top Selling Brands</h5>
                        <canvas id="brandChart" height="300"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Row 2 -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card shadow" style="border-radius: 15px;">
                    <div class="card-body">
                        <h5 class="card-title">Transactions Data</h5>
                        <canvas id="transactionsChart" height="300"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card shadow" style="border-radius: 15px;">
                    <div class="card-body">
                        <h5 class="card-title">Best Selling Categories</h5>
                        <canvas id="categoriesChart" height="300"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Best Selling Products -->
        <div class="row">
            <div class="col-12">
                <div class="card shadow" style="border-radius: 15px;">
                    <div class="card-body">
                        <h5 class="card-title">Best Selling Products</h5>
                        <canvas id="productsChart" height="300"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Chart.js library -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- Dashboard JavaScript -->
    <script>
        // Get dashboard data from server and parse it correctly
        const dashboardData = JSON.parse('<%- dashboardDataString %>');
        let currentFilter = '<%= defaultPeriod %>'; // Get default filter from server

        // For debugging - check if data is loaded correctly
        console.log("Dashboard data loaded:", dashboardData);

        // Initialize charts when page loads
        document.addEventListener('DOMContentLoaded', function () {
            try {
                updateDashboard(currentFilter);
                console.log("Dashboard updated successfully with filter:", currentFilter);
            } catch (error) {
                console.error("Error updating dashboard:", error);
            }

            // Set up filter button clicks
            document.querySelectorAll('.filter-btn').forEach(button => {
                button.addEventListener('click', function () {
                    try {
                        // Update UI for selected filter
                        document.querySelectorAll('.filter-btn').forEach(btn => {
                            btn.classList.remove('btn-success');
                            btn.classList.add('btn-outline-dark');
                        });
                        this.classList.remove('btn-outline-dark');
                        this.classList.add('btn-success');

                        // Update data based on filter
                        currentFilter = this.getAttribute('data-filter');
                        updateDashboard(currentFilter);
                        console.log("Filter changed to:", currentFilter);
                    } catch (error) {
                        console.error("Error changing filter:", error);
                    }
                });
            });
        });

        function updateDashboard(filter) {
            // Check if filter data exists
            if (!dashboardData || !dashboardData[filter]) {
                console.error("No data available for filter:", filter);
                return;
            }

            // Update charts
            updateRevenueChart(dashboardData[filter].revenue);
            updateBrandsChart(dashboardData[filter].topBrands);
            updateTransactionsChart(dashboardData[filter].transactions);
            updateCategoriesChart(dashboardData[filter].topCategories);
            updateProductsChart(dashboardData[filter].topProducts);
        }

        // Revenue Chart
        let revenueChart;
        function updateRevenueChart(data) {
            if (!data || !data.labels || !data.values) {
                console.error("Invalid revenue chart data");
                return;
            }

            const ctx = document.getElementById('revenueChart').getContext('2d');
            if (!ctx) {
                console.error("Could not get revenue chart context");
                return;
            }

            if (revenueChart) {
                revenueChart.destroy();
            }

            revenueChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: data.labels,
                    datasets: [{
                        label: 'Revenue',
                        data: data.values,
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 2,
                        tension: 0.3,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function (value) {
                                    return 'â‚¹' + value;
                                }
                            }
                        }
                    }
                }
            });
        }

        // Top Brands Chart
        let brandsChart;
        function updateBrandsChart(data) {
            if (!data || !data.labels || !data.values) {
                console.error("Invalid brand chart data");
                return;
            }

            const ctx = document.getElementById('brandChart').getContext('2d');
            if (!ctx) {
                console.error("Could not get brand chart context");
                return;
            }

            if (brandsChart) {
                brandsChart.destroy();
            }

            brandsChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.labels,
                    datasets: [{
                        label: 'Sales Count',
                        data: data.values,
                        backgroundColor: '#26a69a',
                        borderWidth: 0,
                        borderRadius: 5,
                    }]
                },
                options: {
                    responsive: true,
                    indexAxis: 'y',
                    scales: {
                        x: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // Transactions Chart
        let transactionsChart;
        function updateTransactionsChart(data) {
            if (!data || !data.labels || !data.values) {
                console.error("Invalid transactions chart data");
                return;
            }

            const ctx = document.getElementById('transactionsChart').getContext('2d');
            if (!ctx) {
                console.error("Could not get transactions chart context");
                return;
            }

            if (transactionsChart) {
                transactionsChart.destroy();
            }

            // Define colors for each transaction type
            const colorMap = {
                'Add Money to Wallet': '#f44336',
                'Refund Product': '#ffeb3b',
                'Product Cancelled': '#2196f3',
                'Product Purchase': '#4caf50',
                'Referral Reward': '#9c27b0'
            };

            // Generate colors array based on labels
            const colors = data.labels.map(label => colorMap[label] || '#9e9e9e');

            transactionsChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: data.labels,
                    datasets: [{
                        data: data.values,
                        backgroundColor: colors,
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        },
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    const label = context.label || '';
                                    const value = context.parsed || 0;
                                    return `${label}: ${value}%`;
                                }
                            }
                        }
                    }
                }
            });
        }

        // Categories Chart
        let categoriesChart;
        function updateCategoriesChart(data) {
            if (!data || !data.labels || !data.values) {
                console.error("Invalid categories chart data");
                return;
            }

            const ctx = document.getElementById('categoriesChart').getContext('2d');
            if (!ctx) {
                console.error("Could not get categories chart context");
                return;
            }

            if (categoriesChart) {
                categoriesChart.destroy();
            }

            categoriesChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.labels,
                    datasets: [{
                        label: 'Sales Count',
                        data: data.values,
                        backgroundColor: '#26a69a',
                        borderWidth: 0,
                        borderRadius: 5
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }


        // Products Chart
        let productsChart;
        function updateProductsChart(data) {
            if (!data || !data.labels || !data.values) {
                console.error("Invalid products chart data");
                return;
            }

            const ctx = document.getElementById('productsChart').getContext('2d');
            if (!ctx) {
                console.error("Could not get products chart context");
                return;
            }

            if (productsChart) {
                productsChart.destroy();
            }

            productsChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.labels,
                    datasets: [{
                        label: 'Sales Count',
                        data: data.values,
                        backgroundColor: '#26a69a',
                        borderWidth: 0,
                        borderRadius: 5
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        },
                        x: {
                            ticks: {
                                maxRotation: 45, // Rotate labels to fit better
                                minRotation: 45,
                                callback: function (value, index, values) {
                                    // Truncate long labels for display on the axis
                                    const maxLength = 20; // Adjust as needed
                                    const label = data.labels[index];
                                    return label.length > maxLength ? label.substring(0, maxLength) + '...' : label;
                                }
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                title: function (context) {
                                    // Show the full product name in the tooltip
                                    const index = context[0].dataIndex;
                                    return data.labels[index]; // Full label without truncation
                                },
                                label: function (context) {
                                    const value = context.parsed.y || 0;
                                    return `Sales: ${value}`;
                                }
                            },
                            // Optional: Customize tooltip appearance
                            titleFont: {
                                size: 14
                            },
                            bodyFont: {
                                size: 12
                            },
                            padding: 10,
                            caretPadding: 10
                        }
                    }
                }
            });
        }

        // Utility function to format numbers with commas
        function numberWithCommas(x) {
            return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }
    </script>

    <%- include("../../views/partials/admin/footer") %>