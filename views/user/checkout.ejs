<%- include("../../views/partials/user/header.ejs") %>

    <style>
        .breadcrumb {
            background-color: #f8c8dc;
            padding: 15px;
            font-size: 14px;
            color: #333;
            display: flex;
            align-items: center;
            gap: 10px;
            border-radius: 8px;
            margin: 0 20px 20px 20px;
        }

        .breadcrumb a {
            color: #d14792;
            text-decoration: none;
        }

        .breadcrumb span {
            color: #888;
        }

        .checkout-container {
            display: flex;
            justify-content: space-between;
            padding: 20px;
            max-width: 1200px;
            margin: 0 auto;
            background-color: #fff;
        }

        .left-section {
            width: 65%;
            margin-right: 20px;
        }

        .address-section,
        .products-section {
            background-color: #f8c8dc;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .address-section h3,
        .products-section h3 {
            margin-top: 0;
            color: #333;
        }

        .address-option {
            background-color: #fff;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 5px;
            cursor: pointer;
            display: flex;
            align-items: center;
        }

        .address-option input {
            margin-right: 10px;
        }

        .address-option:hover {
            background-color: #f0f0f0;
        }

        .add-address-btn {
            background-color: #d14792;
            color: #fff;
            border: none;
            padding: 10px;
            border-radius: 5px;
            cursor: pointer;
            width: 100%;
            font-size: 14px;
        }

        .add-address-btn:hover {
            background-color: #b13f7d;
        }

        .products-table {
            width: 100%;
            border-collapse: collapse;
        }

        .products-table th {
            background-color: #d14792;
            color: #fff;
            padding: 10px;
            text-align: left;
        }

        .products-table td {
            background-color: #fff;
            padding: 10px;
            border-bottom: 1px solid #f8c8dc;
        }

        .products-table td img {
            width: 50px;
            height: 50px;
            margin-right: 10px;
        }

        .products-table .quantity {
            text-align: center;
        }

        .products-table .quantity-btn {
            background-color: #d14792;
            color: #fff;
            border: none;
            padding: 5px;
            border-radius: 50%;
            cursor: pointer;
            margin: 0 5px;
        }

        .products-table .quantity-btn:hover {
            background-color: #b13f7d;
        }

        .price-details {
            width: 38%;
            height: 490px;
            background-color: #f8c8dc;
            padding: 15px;
            border-radius: 8px;
        }

        .price-details h3 {
            margin-top: 0;
            color: #333;
        }

        .price-details p {
            margin: 5px 0;
            color: #333;
            display: flex;
            justify-content: space-between;
        }

        .price-details select {
            width: 60%;
            padding: 5px;
            border-radius: 5px;
            border: 1px solid #d14792;
            font-size: 14px;
            margin-bottom: 10px;
        }

        .place-order-btn {
            background-color: #d14792;
            color: #fff;
            border: none;
            padding: 10px;
            border-radius: 5px;
            width: 100%;
            cursor: pointer;
            font-size: 14px;
            margin-top: 20px;
        }

        .place-order-btn:hover {
            background-color: #b13f7d;
        }

        .payment-methods {
            margin-top: 15px;
        }

        .payment-option {
            background-color: #fff;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 5px;
            cursor: pointer;
            display: flex;
            align-items: center;
        }

        .payment-option input {
            margin-right: 10px;
        }

        .payment-option:hover {
            background-color: #f0f0f0;
        }

        .no-address-message {
            background-color: #fff;
            padding: 15px;
            border-radius: 5px;
            text-align: center;
            color: #d14792;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            background-color: #fff;
            margin: 10% auto;
            padding: 20px;
            border-radius: 8px;
            width: 50%;
            max-width: 600px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #f8c8dc;
        }

        .modal-header h3 {
            margin: 0;
            color: #d14792;
        }

        .close-modal {
            color: #d14792;
            font-size: 24px;
            font-weight: bold;
            cursor: pointer;
        }

        .address-form {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            color: #333;
            font-weight: 500;
        }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        .form-group.full-width {
            grid-column: span 2;
        }

        .save-address-btn {
            background-color: #d14792;
            color: #fff;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            width: 100%;
            margin-top: 10px;
        }

        .save-address-btn:hover {
            background-color: #b13f7d;
        }

        /* Coupon styles */
        .coupon-container {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
            width: 100%;
        }

        .coupon-container select {
            flex-grow: 1;
            margin-right: 10px;
            margin-bottom: 0;
            max-width: 75%;
        }

        .apply-coupon-btn {
            background-color: #d14792;
            color: #fff;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            white-space: nowrap;
        }

        .apply-coupon-btn:hover {
            background-color: #b13f7d;
        }

        .price-item {
            display: flex;
            justify-content: space-between;
            padding: 5px 0;
            border-bottom: 1px dotted #d1479260;
        }

        .price-item.total {
            border-bottom: none;
            font-weight: bold;
            margin-top: 10px;
            padding-top: 10px;
            border-top: 2px solid #d14792;
        }

        .coupon-discount-row {
            color: #d14792;
        }

        /* Fix for coupon dropdown */
        #couponSelect {
            text-overflow: ellipsis;
            overflow: hidden;
            white-space: nowrap;
            width: 100%;
        }

        #couponSelect option {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        #couponSelect::-webkit-scrollbar {
            width: 5px;
        }
    </style>

    <div class="breadcrumb-wrap">
        <div class="breadcrumb">
            <a href="/">Home</a>
            <span>></span>
            <span>Checkout</span>
        </div>
    </div>

    <div class="checkout-container">
        <div class="left-section">
            <!-- Address Selection Section -->
            <div class="address-section">
                <h3>Select a delivery address</h3>
                <% if (address && address.address && address.address.length> 0) { %>
                    <% address.address.forEach((addr, index)=> { %>
                        <div class="address-option">
                            <input type="radio" name="address" id="address<%= index %>" value="<%= addr._id %>"
                                class="address-radio">
                            <label for="address<%= index %>">
                                <%= addr.name %>, <%= addr.landMark %>, <%= addr.city %>, <%= addr.state %>, <%=
                                                    addr.pincode %>, India<br>
                                                    Phone number: <%= addr.phone %>
                            </label>
                        </div>
                        <% }); %>
                            <% } else { %>
                                <div class="no-address-message">
                                    <p>No addresses found. Please add a delivery address.</p>
                                </div>
                                <% } %>
                                    <button class="add-address-btn" id="addAddressBtn">Add New Address</button>
            </div>

            <!-- Products Section -->
            <div class="products-section">
                <h3>Products</h3>
                <table class="products-table">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Subtotal</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (cart && cart.items && cart.items.length> 0) { %>
                            <% cart.items.forEach(item=> { %>
                                <tr>
                                    <td>
                                        <img src="/uploads/re-image/<%=item.productId.productImage[0]%>"
                                            alt="<%= item.productId.name %>">
                                        <%= item.productId.productName.length> 40 ?
                                            item.productId.productName.substring(0, 51) + "..." :
                                            item.productId.productName %>
                                            <!-- <%= item.productId.productName %> -->
                                    </td>
                                    <td class="quantity">
                                        <%= item.quantity %>
                                    </td>
                                    <td>₹<%= item.totalPrice.toFixed(2) %>
                                    </td>
                                </tr>
                                <% }); %>
                                    <% } else { %>
                                        <tr>
                                            <td colspan="3">Your cart is empty</td>
                                        </tr>
                                        <% } %>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Price Details Section -->
        <div class="price-details">
            <h3>Price Details</h3>
            <% let totalItems=0; let totalAmount=0; if (cart && cart.items) { totalItems=cart.items.reduce((sum, item)=>
                sum + item.quantity, 0);
                totalAmount = cart.items.reduce((sum, item) => sum + item.totalPrice, 0);
                }
                %>
                <div class="price-item">
                    <span>Price (<%= totalItems %> items)</span>
                    <span>₹<%= totalAmount.toFixed(2) %></span>
                </div>

                <div class="price-item">
                    <span>Delivery charge</span>
                    <span>Free</span>
                </div>

                <div class="price-item">
                    <span>Available Coupon</span>
                    <div class="coupon-container">
                        <select id="couponSelect">
                            <option value="">Select Available Coupon</option>
                            <% if (coupons && coupons.length> 0) { %>
                                <% coupons.forEach(coupon=> { %>
                                    <option value="<%= coupon._id %>" data-discount="<%= coupon.offerPrice %>"
                                        data-name="<%= coupon.name %>" data-min="<%= coupon.minimumPrice %>">
                                        <%= coupon.name %> - ₹<%= coupon.offerPrice %> Off (Min: ₹<%=
                                                    coupon.minimumPrice %>)
                                    </option>
                                    <% }); %>
                                        <% } %>
                        </select>
                        <button id="applyCouponBtn" class="apply-coupon-btn">Apply</button>
                    </div>
                </div>

                <div id="couponDiscountRow" class="price-item coupon-discount-row" style="display: none;">
                    <span>Coupon Discount</span>
                    <span id="couponDiscount">-₹0.00</span>
                </div>

                <div class="price-item total">
                    <span>Total Amount</span>
                    <span id="orderTotal">₹<%= totalAmount.toFixed(2) %></span>
                </div>

                <!-- Payment Method Selection -->
                <div class="payment-methods">
                    <div class="payment-option">
                        <input type="radio" name="paymentMethod" id="cod" value="COD" checked>
                        <label for="cod">Cash on Delivery</label>
                    </div>
                    <div class="payment-option">
                        <input type="radio" name="paymentMethod" id="online" value="ONLINE">
                        <label for="online">Pay Online</label>
                    </div>
                </div>

                <button class="place-order-btn" id="placeOrderBtn">Place an Order <span>→</span></button>
        </div>
    </div>

    <!-- Add Address Modal -->
    <div id="addressModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Add New Address</h3>
                <span class="close-modal">&times;</span>
            </div>
            <form id="addressForm" class="address-form">
                <div class="form-group">
                    <label for="addressType">Address Type</label>
                    <select id="addressType" name="addressType" required>
                        <option value="home">Home</option>
                        <option value="work">Work</option>
                        <option value="other">Other</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="name">Full Name</label>
                    <input type="text" id="name" name="name" required>
                </div>
                <div class="form-group">
                    <label for="phone">Phone Number</label>
                    <input type="tel" id="phone" name="phone" required>
                </div>
                <div class="form-group">
                    <label for="altPhone">Alternative Phone (Optional)</label>
                    <input type="tel" id="altPhone" name="altPhone">
                </div>
                <div class="form-group">
                    <label for="landMark">Landmark</label>
                    <input type="text" id="landMark" name="landMark" required>
                </div>
                <div class="form-group">
                    <label for="city">City</label>
                    <input type="text" id="city" name="city" required>
                </div>
                <div class="form-group">
                    <label for="state">State</label>
                    <input type="text" id="state" name="state" required>
                </div>
                <div class="form-group">
                    <label for="pincode">Pincode</label>
                    <input type="number" id="pincode" name="pincode" required>
                </div>
                <div class="form-group full-width">
                    <button type="submit" class="save-address-btn">Save Address</button>
                </div>
            </form>
        </div>
    </div>

    <!-- The main change is in the JavaScript section - I'll preserve all other code -->

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const placeOrderBtn = document.getElementById('placeOrderBtn');
            const couponSelect = document.getElementById('couponSelect');
            const applyCouponBtn = document.getElementById('applyCouponBtn');
            const addAddressBtn = document.getElementById('addAddressBtn');
            const addressModal = document.getElementById('addressModal');
            const closeModal = document.querySelector('.close-modal');
            const addressForm = document.getElementById('addressForm');
            let totalAmount = '<%= totalAmount %>';
            let appliedCouponId = null;
            let appliedCouponDiscount = 0;
            let originalTotal = parseFloat(totalAmount);

            // Format coupon options to display shorter text when selected
            function formatCouponOptions() {
                document.querySelectorAll('#couponSelect option').forEach(option => {
                    if (option.value) {
                        // Store the full text for reference
                        option.setAttribute('data-full-text', option.text);
                    }
                });
            }

            // When a coupon is selected, ensure the display text is condensed
            couponSelect.addEventListener('change', function () {
                const selectedOption = this.options[this.selectedIndex];

                if (selectedOption && selectedOption.value) {
                    const couponName = selectedOption.dataset.name;
                    const discount = selectedOption.dataset.discount;

                    // Update the selected text to a shorter version
                    selectedOption.text = `${couponName} - ₹${discount} Off`;
                }
            });

            // Initialize coupon options
            formatCouponOptions();

            // Open modal
            addAddressBtn.addEventListener('click', function () {
                addressModal.style.display = 'block';
            });

            // Close modal
            closeModal.addEventListener('click', function () {
                addressModal.style.display = 'none';
            });

            // Close modal when clicking outside
            window.addEventListener('click', function (event) {
                if (event.target === addressModal) {
                    addressModal.style.display = 'none';
                }
            });

            // Handle address form submission
            addressForm.addEventListener('submit', function (e) {
                e.preventDefault();

                const formData = {
                    addressType: document.getElementById('addressType').value,
                    name: document.getElementById('name').value,
                    phone: document.getElementById('phone').value,
                    altPhone: document.getElementById('altPhone').value || null,
                    landMark: document.getElementById('landMark').value,
                    city: document.getElementById('city').value,
                    state: document.getElementById('state').value,
                    pincode: document.getElementById('pincode').value
                };


                const phoneRegex = /^[6-9]\d{9}$/;
                const pincodeRegex = /^\d{6}$/;

                if (!phoneRegex.test(formData.phone)) {
                    return Swal.fire({
                        icon: 'error',
                        title: 'Invalid Phone Number',
                        text: 'Please enter a valid 10-digit phone number starting with 6-9.',
                        confirmButtonColor: '#d14792'
                    });
                }

                if (formData.altPhone && !phoneRegex.test(formData.altPhone)) {
                    return Swal.fire({
                        icon: 'error',
                        title: 'Invalid Alternate Phone',
                        text: 'Alternate phone must also be a valid 10-digit number if provided.',
                        confirmButtonColor: '#d14792'
                    });
                }

                if (!pincodeRegex.test(formData.pincode)) {
                    return Swal.fire({
                        icon: 'error',
                        title: 'Invalid Pincode',
                        text: 'Please enter a valid 6-digit pincode.',
                        confirmButtonColor: '#d14792'
                    });
                }

                fetch('/add-address', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(err => {
                                throw new Error(err.message || 'Something went wrong');
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        Swal.fire({
                            icon: 'success',
                            title: 'Address Added!',
                            text: data.message || 'Your address has been added successfully.',
                            confirmButtonColor: '#d14792'
                        }).then(() => {
                            window.location.reload();
                        });
                    })
                    .catch(error => {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: error.message || 'Failed to add address. Please try again.',
                            confirmButtonColor: '#d14792'
                        });
                    });
            });

            // Apply/Remove coupon button click handler
            applyCouponBtn.addEventListener('click', function () {
                // If a coupon is already applied, this will be a "Remove" action
                if (appliedCouponId) {
                    // Remove coupon discount
                    appliedCouponId = null;
                    appliedCouponDiscount = 0;

                    // Hide the coupon discount row
                    document.getElementById('couponDiscountRow').style.display = 'none';

                    // Reset total to original amount
                    document.getElementById('orderTotal').textContent = `₹${originalTotal.toFixed(2)}`;

                    const selectedOption = couponSelect.options[couponSelect.selectedIndex];
                    if (selectedOption.dataset.fullText) {
                        selectedOption.text = selectedOption.dataset.fullText;
                    }

                    // Reset the select dropdown
                    couponSelect.disabled = false;
                    couponSelect.selectedIndex = 0;

                    // Change button text back to "Apply"
                    applyCouponBtn.textContent = 'Apply';

                    Swal.fire({
                        icon: 'success',
                        title: 'Coupon Removed',
                        text: 'The coupon has been removed from your order.',
                        confirmButtonColor: '#d14792',
                        timer: 1500
                    }).then(() => {
                        location.reload();
                    })

                    return;
                }

                // This is an "Apply" action
                const selectedCoupon = couponSelect.options[couponSelect.selectedIndex];
                const couponId = couponSelect.value;

                if (!couponId) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'No Coupon Selected',
                        text: 'Please select a coupon from the dropdown.',
                        confirmButtonColor: '#d14792'
                    });
                    return;
                }

                const discount = parseFloat(selectedCoupon.dataset.discount) || 0;
                const couponName = selectedCoupon.dataset.name || 'Coupon';
                const minAmount = parseFloat(selectedCoupon.dataset.min) || 0;

                // Check if order meets minimum amount requirement
                if (originalTotal < minAmount) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Cannot Apply Coupon',
                        text: `This coupon requires a minimum order of ₹${minAmount.toFixed(2)}.`,
                        confirmButtonColor: '#d14792'
                    });
                    return;
                }

                // Display the coupon discount
                document.getElementById('couponDiscount').textContent = `-₹${discount.toFixed(2)}`;
                document.getElementById('couponDiscountRow').style.display = 'flex';

                // Calculate new total with discount
                const newTotal = Math.max(0, originalTotal - discount);
                document.getElementById('orderTotal').textContent = `₹${newTotal.toFixed(2)}`;

                // Store the applied coupon info
                appliedCouponId = couponId;
                appliedCouponDiscount = discount;

                // Disable the select dropdown while coupon is applied
                couponSelect.disabled = true;

                // Change button text to "Remove"
                applyCouponBtn.textContent = 'Remove';

                Swal.fire({
                    icon: 'success',
                    title: 'Coupon Applied!',
                    text: `${couponName} has been applied to your order.`,
                    confirmButtonColor: '#d14792',
                    timer: 1500
                });
            });

            // Place order button click handler
            placeOrderBtn.addEventListener('click', function () {

                const selectedAddress = document.querySelector('input[name="address"]:checked');

                if (!selectedAddress) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Address Required',
                        text: 'Please select a delivery address',
                        confirmButtonColor: '#d14792'
                    });
                    return;
                }

                // Get payment method
                const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;

                // Prepare order data
                const orderData = {
                    addressId: selectedAddress.value,
                    paymentMethod: paymentMethod
                };

                // Add coupon ID if one is applied
                if (appliedCouponId) {
                    orderData.couponId = appliedCouponId;
                }

                if (paymentMethod == 'ONLINE') {

                    fetch('/placeOrderOnlinePayment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(orderData)
                    })
                        .then(response => {
                            if (!response.ok) {
                                return response.json().then(err => {
                                    throw new Error(err.message || 'Something went wrong');
                                });
                            }
                            return response.json();
                        })
                        .then(res => {
                            if (res.success) {
                                var options = {
                                    "key": "" + res.key_id + "",
                                    "amount": "" + res.amount + "",
                                    "currency": "INR",
                                    "name": "" + res.product_name + "",
                                    "description": "" + res.description + "",
                                    "image": "/images/bgremovedlogo.png",
                                    "order_id": "" + res.order_id + "",
                                    "handler": function (response) {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Payment Successful!',
                                            text: 'Redirecting to order confirmation...',
                                            timer: 2000,
                                            confirmButtonColor: '#d14792',
                                            willClose: () => {
                                                fetch('/verify-payment-and-place-order', {
                                                    method: 'POST',
                                                    headers: {
                                                        'Content-Type': 'application/json'
                                                    },
                                                    body: JSON.stringify({
                                                        razorpay_order_id: response.razorpay_order_id,
                                                        razorpay_payment_id: response.razorpay_payment_id,
                                                        razorpay_signature: response.razorpay_signature,
                                                        addressId: selectedAddress.value,
                                                        couponId: appliedCouponId
                                                    })
                                                })
                                                    .then(res => res.json())
                                                    .then(data => {
                                                        if (data.success) {
                                                            window.location.href = '/order-success?id=' + data.orderId;
                                                        } else {
                                                            Swal.fire('Error', data.message, 'error');
                                                        }
                                                    });
                                            }
                                        });
                                    },
                                    "prefill": {
                                        "contact": "" + res.contact + "",
                                        "name": "" + res.name + "",
                                        "email": "" + res.email + ""
                                    },
                                    "notes": {
                                        "description": "" + res.description + ""
                                    },
                                    "theme": {
                                        "color": "#2300a3"
                                    }
                                };
                                var razorpayObject = new Razorpay(options);
                                razorpayObject.on('payment.failed', function (response) {
                                    alert("Payment Failed");
                                });
                                razorpayObject.open();
                            } else {
                                alert(res.msg);                            //add swal for error and redirect to show payment failure page
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Something went wrong',
                                text: error.message || 'Failed to place order. Please try again.',
                                confirmButtonColor: '#d14792'
                            });
                        });



                } else {

                    // Send order to server for COD 
                    fetch('/place-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(orderData)
                    })
                        .then(response => {
                            if (!response.ok) {
                                return response.json().then(err => {
                                    throw new Error(err.message || 'Something went wrong');
                                });
                            }
                            return response.json();
                        })
                        .then(data => {
                            Swal.fire({
                                icon: 'success',
                                title: 'Order Placed!',
                                text: data.message,
                                confirmButtonColor: '#d14792'
                            }).then(() => {
                                window.location.href = '/order-success?id=' + data.orderId;
                            });
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Something went wrong',
                                text: error.message || 'Failed to place order. Please try again.',
                                confirmButtonColor: '#d14792'
                            });
                        });
                }
            });

        });
    </script>

    <%- include("../../views/partials/user/footer.ejs") %>