<%- include("../../views/partials/admin/header") %>

<style>
    /* General Page Styling */
    body {
        font-family: 'Poppins', sans-serif;
        background-color: #f9f9fb;
        color: #333;
    }

    /* Content Styling */
    .content-container {
        margin-left: 280px;
        padding: 20px;
        width: calc(100% - 280px);
    }

    /* Content Title Styling */
    .content-title {
        font-size: 24px;
        font-weight: 700;
        color: #563d7c;
        text-align: left;
        margin-bottom: 15px;
    }

    /* Search Bar Styling */
    .search-container {
        display: flex;
        justify-content: center;
        margin-bottom: 20px;
    }

    .search-container .input-group {
        width: 500px;
        border: 1px solid #ccc;
        border-radius: 50px;
        overflow: hidden;
        display: flex;
    }

    .search-container .form-control {
        border: none;
        padding: 10px;
        border-radius: 50px 0 0 50px;
    }

    .search-container .btn {
        background-color: #6c43c1;
        color: white;
        border-radius: 0 50px 50px 0;
    }

    /* Table Styling */
    .table-container {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        margin-top: 20px;
    }

    .table thead {
        background: #563d7c;
        color: white;
    }

    .table th, .table td {
        text-align: center;
        padding: 12px 15px;
        border-bottom: 1px solid #ddd;
    }

    /* Status Badges */
    .status-badge {
        display: inline-block;
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 500;
    }

    .status-active {
        background: #e0f9eb;
        color: #219653;
        border: 1px solid #219653;
    }

    .status-blocked {
        background: #fde6e6;
        color: #eb5757;
        border: 1px solid #eb5757;
    }

    /* Pagination Styling */
    .pagination-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .pagination {
        display: flex;
        list-style: none;
        padding: 0;
    }

    .pagination li {
        margin: 0 5px;
    }

    .pagination a {
        display: block;
        padding: 8px 12px;
        background: #6c43c1;
        color: white;
        text-decoration: none;
        border-radius: 5px;
        transition: 0.3s;
    }

    .pagination a:hover {
        background: #563d7c;
    }

    .pagination .active a {
        background: #563d7c;
        font-weight: bold;
        pointer-events: none;
    }
    
    /* Toast notification styling */
    .notification-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1050;
    }
    
    .notification {
        min-width: 250px;
        background-color: white;
        color: #333;
        border-radius: 5px;
        padding: 15px;
        box-shadow: 0 0 10px rgba(0,0,0,0.2);
        margin-bottom: 10px;
        opacity: 0;
        transition: opacity 0.3s;
    }
    
    .notification.show {
        opacity: 1;
    }
    
    .notification-success {
        border-left: 4px solid #28a745;
    }
    
    .notification-error {
        border-left: 4px solid #dc3545;
    }
</style>

<div class="content-container">
    <div class="content-header row d-flex justify-content-between align-items-center">
        <h2 class="content-title">ðŸ“Œ Customers</h2>
    </div>
  
    <!-- Search Bar -->
    <div class="search-container">
        <form action="/admin/users/" method="get" class="d-flex">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search customers..." name="search">
                <button class="btn btn-primary" type="submit">Search</button>
            </div>
        </form>
    </div>

    <!-- Notification container -->
    <div class="notification-container"></div>

    <!-- Table -->
    <div class="table-container">
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th><b>Name</b></th>
                        <th><b>Email</b></th>
                        <th><b>Customer ID</b></th>
                        <th><b>Status</b></th>
                        <th><b>Action</b></th>
                    </tr>
                </thead>
                <tbody>
                    <% for(let i = 0; i < data.length; i++) { %>
                        <tr id="user-row-<%= data[i]._id %>">
                            <td><%= data[i].name %></td>
                            <td><%= data[i].email %></td>
                            <td><%= data[i].userId.slice(0,8) %></td>
                            <td>
                                <span class="status-badge <%= data[i].isBlocked ? 'status-blocked' : 'status-active' %>" id="status-<%= data[i]._id %>">
                                    <%= data[i].isBlocked ? 'Blocked' : 'Active' %>
                                </span>
                            </td>
                            <td>
                                <button class="btn <%= data[i].isBlocked ? 'btn-success' : 'btn-danger' %>" style="width: 80px;" 
                                        onclick="toggleUserStatus('<%= data[i]._id %>', <%= data[i].isBlocked %>)" 
                                        id="btn-<%= data[i]._id %>">
                                    <%= data[i].isBlocked ? 'Unblock' : 'Block' %>
                                </button>
                            </td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Pagination-->
    <div class="pagination-container">
        <nav>
            <ul class="pagination">
                <% for(let i = 1; i <= totalPages; i++) { %>
                    <li class="page-item <%=(i == currentPage) ? 'active' : ''%>">
                        <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                    </li>
                <% } %>
            </ul>
        </nav>
    </div>
</div>

<script>
    function toggleUserStatus(userId, isCurrentlyBlocked) {
        // Disable button during the request
        const button = document.getElementById(`btn-${userId}`);
        const statusBadge = document.getElementById(`status-${userId}`);
        
        button.disabled = true;
        button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>';
        
        const endpoint = isCurrentlyBlocked ? 
            `/admin/unblockCustomer-ajax?id=${userId}` : 
            `/admin/blockCustomer-ajax?id=${userId}`;
        
        fetch(endpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // Update button and status
                const newStatus = isCurrentlyBlocked ? false : true;
                
                // Update button
                button.className = `btn ${newStatus ? 'btn-success' : 'btn-danger'}`;
                button.innerHTML = newStatus ? 'Unblock' : 'Block';
                button.disabled = false;
                
                // Update status badge
                statusBadge.className = `status-badge ${newStatus ? 'status-blocked' : 'status-active'}`;
                statusBadge.innerText = newStatus ? 'Blocked' : 'Active';
                
                // Update onclick attribute
                button.onclick = function() {
                    toggleUserStatus(userId, newStatus);
                };
                
                // Show notification
                showNotification(`User ${newStatus ? 'blocked' : 'unblocked'} successfully`, 'success');
            } else {
                showNotification(data.message || 'An error occurred', 'error');
                button.disabled = false;
                button.innerHTML = isCurrentlyBlocked ? 'Unblock' : 'Block';
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification('An error occurred', 'error');
            button.disabled = false;
            button.innerHTML = isCurrentlyBlocked ? 'Unblock' : 'Block';
        });
    }
    
    function showNotification(message, type = 'success') {
        const notificationContainer = document.querySelector('.notification-container');
        const notification = document.createElement('div');
        
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `<div class="notification-body">${message}</div>`;
        
        notificationContainer.appendChild(notification);
        
        // Show notification
        setTimeout(() => {
            notification.classList.add('show');
        }, 100);
        
        // Hide and remove notification after 3 seconds
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                notificationContainer.removeChild(notification);
            }, 300);
        }, 3000);
    }
</script>

<%- include("../../views/partials/admin/footer") %>