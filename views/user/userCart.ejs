<%- include("../../views/partials/user/header.ejs") %>

<style>
    .main-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .cart-table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
    }

    .cart-table th {
        background-color: #d14792;
        color: white;
        padding: 10px;
        text-align: left;
    }

    .cart-table td {
        padding: 10px;
        border-bottom: 1px solid #ddd;
        background-color: #ffebf0;
    }

    .cart-table img {
        max-width: 50px;
        height: auto;
        vertical-align: middle;
        margin-right: 10px;
    }

    .quantity-btn {
        border: none;
        background-color: #d14792;
        color: white;
        width: 25px;
        height: 25px;
        border-radius: 50%;
        cursor: pointer;
        font-weight: bold;
        font-size: 14px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        margin: 0 5px;
    }
    .quantity-btn:hover {
        background-color: #b5367a;
    }

    .quantity-controls {
        display: flex;
        align-items: center;
    }


    .quantity-input {
        width: 40px;
        text-align: center;
        border: none;
        background-color: #ffebf0;
        appearance: textfield; 
    }

     /* Remove spinner arrows for Chrome, Safari, Edge, Opera */
     .quantity-input::-webkit-outer-spin-button,
    .quantity-input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    .remove-btn {
        color: #d33;
        cursor: pointer;
        text-decoration: underline;
    }

    .summary-box {
        float: right;
        width: 300px;
        padding: 20px;
        border: 1px solid #ddd;
        background-color: #ffebf0;
        border-radius: 8px;
    }

    .summary-box p {
        margin: 10px 0;
    }

    .summary-box button {
        background-color: #d14792;
        color: white;
        padding: 10px;
        border: none;
        border-radius: 5px;
        width: 100%;
        cursor: pointer;
    }

    .summary-box button:hover {
        background-color: #b5367a;
    }

    .breadcrumb {
        background-color: #f8c8dc;
        padding: 15px;
        font-size: 14px;
        color: #333;
        display: flex;
        align-items: center;
        gap: 10px;
        border-radius: 8px;
        margin-bottom: 20px;
    }

    .breadcrumb a {
        color: #d14792;
        text-decoration: none;
    }

    .breadcrumb span {
        color: #888;
    }
    .remove-btn {
        background-color: #d33;
        text-decoration: none;
        color: white;
        padding: 5px 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
    }

    .remove-btn:hover {
        background-color: #b52929;
    }
</style>

<div class="main-container">
    <section class="cart-page">
        <div class="breadcrumb-wrap">
            <div class="breadcrumb">
                <a href="/">Home</a>
                <span>></span>
                <a href="/shop">Shop</a>
                <span>></span>
                <span>Cart</span>
            </div>
        </div>

        <table class="cart-table">
            <thead>
                <tr>
                    <th>Product</th>
                    <!-- <th>Size</th> -->
                    <th>Unit Price</th>
                    <th>Quantity</th>
                    <th>Subtotal</th>
                    <th>Remove</th>
                </tr>
            </thead>
            <tbody>
                <% if (cart && cart.items && cart.items.length > 0) { %>
                    <% cart.items.forEach(item => { %>
                        <% const product = item.productId; %>
                        <% const discount = (product.basePrice * product.discountPercentage) / 100; %>
                        <% const discountedPrice = product.basePrice - discount; %>
                        <tr data-product-id="<%= item._id %>">
                            <td>
                                <img src="/uploads/re-image/<%= product.productImage[0] %>" alt="<%= product.productName %>">
                                <%= product.productName.length > 45 ? product.productName.substring(0, 50) + "..." : product.productName %>
                            </td>
                            <td>₹<%= discountedPrice.toFixed(0) %></td>
                            <td>
                                <div class="quantity-controls">
                                    <button class="quantity-btn decrease-btn" data-product-id="<%= item._id %>">-</button>
                                    <input type="number" class="quantity-input" value="<%= item.quantity %>" min="1" readonly>
                                    <button class="quantity-btn increase-btn" data-product-id="<%= item._id %>">+</button>
                                </div>
                            </td>
                            <td>₹<%= item.totalPrice.toFixed(0) %></td>
                            <td><button class="remove-btn" onclick="removeFromCart('<%= item._id %>')">Remove</button></td>
                        </tr>
                    <% }) %>
                <% } else { %>
                    <tr>
                        <td colspan="6" style="text-align: center; padding: 20px; background-color: #ffe4e1; color: #d14792;">
                            Your cart is empty! <br>Continue shopping <a href="/shop">Shop Now</a>
                        </td>
                    </tr>
                <% } %>
            </tbody>
        </table>

        <div style="display: flex; justify-content: space-between; margin-top: 20px;">
            <div>
                <a href="/shop" class="btn" style="background-color: #d14792; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Continue Shopping</a>
                <button style="background-color: #d14792; color: white; padding: 10px 20px; border: none; border-radius: 5px; margin-left: 10px;">Update Cart</button>
            </div>
            <div class="summary-box">
                <p>Subtotal: ₹<span id="subtotal"><%= cart ? cart.items.reduce((sum, item) => sum + item.totalPrice, 0).toFixed(0) : '0.00' %></span></p>

                <p>Shipping: Free</p>
                <p>Coupon Code: <span style="color: #888;">Not Applied</span></p>
                <p>Total: ₹<span id="total"><%= cart ? cart.items.reduce((sum, item) => sum + item.totalPrice, 0).toFixed(0) : '0.00' %></span></p>
                <button>Proceed to Checkout</button>
            </div>
        </div>
    </section>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    // Function to handle quantity change
    function handleQuantityChange(cartItemId, isIncrease) {
        const row = document.querySelector(`tr[data-product-id="${cartItemId}"]`);
        const input = row.querySelector('.quantity-input');
        let value = parseInt(input.value);
        const newValue = isIncrease ? value + 1 : Math.max(1, value - 1);

        // Check maximum quantity limit of 3
        if (isIncrease && newValue > 3) {
            Swal.fire({
                icon: 'warning',
                title: 'Quantity Limit Reached',
                text: 'You can only add up to 3 items of this product!',
                timer: 2000,
                showConfirmButton: false,
            });
            return;
        }

        fetch(`/get-product-stock?id=${cartItemId}`)
            .then(response => response.json())
            .then(data => {
                const stockLimit = data.stock; // API returns { stock: number }
                
                if (newValue > stockLimit) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Stock Limit Exceeded',
                        text: `Only ${stockLimit} items available in stock!`,
                        timer: 2000,
                        showConfirmButton: false,
                    });
                } else {
                    input.value = newValue;
                    //API call to update cart quantity 
                    updateCartQuantity(cartItemId, newValue);
                }
            })
            .catch(error => {
                console.error('Error checking stock:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to check stock availability',
                    timer: 2000,
                    showConfirmButton: false,
                });
            });
    }

    // Add event listeners for decrease buttons
    document.querySelectorAll('.decrease-btn').forEach(button => {
        button.addEventListener('click', () => {
            const cartItemId = button.getAttribute('data-product-id');
            handleQuantityChange(cartItemId, false);
        });
    });

    // Add event listeners for increase buttons
    document.querySelectorAll('.increase-btn').forEach(button => {
        button.addEventListener('click', () => {
            const cartItemId = button.getAttribute('data-product-id');
            handleQuantityChange(cartItemId, true);
        });
    });

    function updateCartQuantity(cartItemId, quantity) {
        console.log(`Updating cart: cartItemId=${cartItemId}, quantity=${quantity}`);
        fetch(`/update-cart-quantity`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ cartItemId, quantity })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log("Quantity of product updated in cart");
                location.reload(); 
            } else {
                console.error('Update failed:', data.message);
                Swal.fire({
                    icon: 'error',
                    title: 'Update Failed',
                    text: data.message || 'Failed to update cart',
                    timer: 2000,
                    showConfirmButton: false,
                });
            }
        })
        .catch(error => {
            console.error('Error updating cart:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to update cart',
                timer: 2000,
                showConfirmButton: false,
            });
        });
    }

    function removeFromCart(itemId) {
        console.log("front end itemID:", itemId);
        Swal.fire({
            title: 'Are you sure?',
            text: 'Do you want to remove this product from your cart?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, remove it!',
            cancelButtonText: 'Cancel',
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/remove-from-cart?id=${itemId}`, {
                    method: 'POST'
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => {
                            throw new Error(err.error || err.message);
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    Swal.fire({
                        icon: 'success',
                        title: data.message || 'Removed from cart',
                        timer: 1200,
                        showConfirmButton: false,
                    }).then(() => {
                        location.reload();
                    });
                })
                .catch(error => {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops!',
                        text: error.message || 'Something went wrong',
                        timer: 1200,
                        showConfirmButton: false,
                    });
                });
            }
        });
    }
</script>

<%- include("../../views/partials/user/footer.ejs") %>